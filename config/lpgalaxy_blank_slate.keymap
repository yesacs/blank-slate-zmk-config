/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   1
// #define TBLE_MIT     1
// #define TBLE_DUAL_2U 1

#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else     
                       &ortho_transform;
#endif
    };

    macros {
      ZMK_MACRO(thumbs_up,
		wait-ms = <1>;
		tap-ms = <5>;
                bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		)
    };
    
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};
    };

// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM_L NAV_L>;
	    then-layer = <SYM_L>;
        };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL/ESC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&lt 3 TAB      &kp Q  &kp W  &kp E     &kp R                 &kp T               &kp Y        &kp U            &kp I      &kp O    &kp P     &kp BSPC
&mt LCTRL ESC  &kp A  &kp S  &kp D     &kp F                 &kp G               &kp H        &kp J            &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT      &kp Z  &kp X  &kp C     &kp V                 &kp B               &kp N        &kp M            &kp COMMA  &kp DOT  &kp FSLH  &kp ENTER
&mo 2          &kp LALT   &kp LGUI  &mt LEFT_SHIFT ENTER    &mt LCTRL ESCAPE     &lt 2 SPACE  &lt 3 BACKSPACE  &kp LEFT    &kp UP     &kp DOWN      &kp RIGHT
            >;
        };

        bt_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |     |     |     |     |     |   |     |     |     |     |     | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans      &trans        &trans        &trans        &trans          &trans        &trans    &trans    &trans  &trans     &trans
&trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&trans  &trans      &trans        &trans        &trans        &trans          &trans        &trans    &trans    &trans  &trans     &trans
&trans &trans  &trans &trans &trans  &trans &trans &trans  &trans &trans &trans 
        &trans        &kp LGUI      &trans          &kp SPACE     &kp RET   &trans
            >;
        };

        brace_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp GRAVE  &kp EQUAL  &kp GREATER_THAN  &trans  &trans    &kp MINUS  &kp EQUAL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SINGLE_QUOTE  &kp BSPC
&trans  &kp N1     &kp N2     &kp N3            &kp N4  &kp N5    &kp N6     &kp N7     &kp N8            &kp N9             &kp N0            &kp GRAVE
&trans  &trans     &trans     &trans            &trans  &trans    &kp UNDER  &kp PLUS   &kp LBRC          &kp RBRC           &kp PIPE          &kp TILDE
&trans &trans  &trans &trans &trans  &trans &trans &trans  &trans &trans &trans 
            >;
        };

        arrow_layer {
            bindings = <
&trans  &trans        &kp EQUAL        &kp GREATER_THAN  &trans  &trans    &trans            &trans    &kp TILDE     &trans     &trans  &kp DEL
&trans  &trans        &trans           &trans            &trans  &trans    &kp LEFT          &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans  &kp C_VOL_DN  &kp C_VOLUME_UP  &trans            &trans  &trans    &trans            &trans    &trans        &trans     &trans  &trans
&trans &trans  &trans &trans &trans  &trans &trans &trans  &trans &trans &trans 
            >;
        };
    };


    };
};

